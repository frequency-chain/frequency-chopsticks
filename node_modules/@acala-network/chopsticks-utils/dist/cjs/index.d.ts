import { ApiPromise, WsProvider } from '@polkadot/api';
import { StorageValues } from '@acala-network/chopsticks';
import { Codec } from '@polkadot/types/types';
import { Config } from '@acala-network/chopsticks/schema/index.js';
import { HexString } from '@polkadot/util/types';
import { Keyring } from '@polkadot/keyring';
import { SubmittableExtrinsic } from '@polkadot/api-base/types';
export * from './signFake.js';
export type SetupOption = {
    endpoint: string | string[];
    blockNumber?: number;
    blockHash?: HexString;
    wasmOverride?: string;
    db?: string;
    timeout?: number;
    port?: number;
    maxMemoryBlockCount?: number;
    resume?: boolean | HexString | number;
    runtimeLogLevel?: number;
    allowUnresolvedImports?: boolean;
    processQueuedMessages?: boolean;
};
export type SetupConfig = Config & {
    timeout?: number;
};
export declare const createConfig: ({ endpoint, blockNumber, blockHash, wasmOverride, db, timeout, port, maxMemoryBlockCount, resume, runtimeLogLevel, allowUnresolvedImports, processQueuedMessages, }: SetupOption) => SetupConfig;
export declare const setupContext: (option: SetupOption) => Promise<{
    url: string;
    chain: import("@acala-network/chopsticks").Blockchain;
    ws: WsProvider;
    api: ApiPromise;
    dev: {
        newBlock: (param?: {
            count?: number;
            to?: number;
            unsafeBlockHeight?: number;
        }) => Promise<string>;
        setStorage: (values: StorageValues, blockHash?: string) => Promise<any>;
        timeTravel: (date: string | number) => Promise<number>;
        setHead: (hashOrNumber: string | number) => Promise<any>;
    };
    teardown(): Promise<void>;
    pause(): Promise<unknown>;
}>;
export declare const setupContextWithConfig: ({ timeout, ...config }: SetupConfig) => Promise<{
    url: string;
    chain: import("@acala-network/chopsticks").Blockchain;
    ws: WsProvider;
    api: ApiPromise;
    dev: {
        newBlock: (param?: {
            count?: number;
            to?: number;
            unsafeBlockHeight?: number;
        }) => Promise<string>;
        setStorage: (values: StorageValues, blockHash?: string) => Promise<any>;
        timeTravel: (date: string | number) => Promise<number>;
        setHead: (hashOrNumber: string | number) => Promise<any>;
    };
    teardown(): Promise<void>;
    pause(): Promise<unknown>;
}>;
export type NetworkContext = Awaited<ReturnType<typeof setupContext>>;
export declare const setupNetworks: (networkOptions: Partial<Record<string, Config | string | undefined>>) => Promise<Record<string, {
    url: string;
    chain: import("@acala-network/chopsticks").Blockchain;
    ws: WsProvider;
    api: ApiPromise;
    dev: {
        newBlock: (param?: {
            count?: number;
            to?: number;
            unsafeBlockHeight?: number;
        }) => Promise<string>;
        setStorage: (values: StorageValues, blockHash?: string) => Promise<any>;
        timeTravel: (date: string | number) => Promise<number>;
        setHead: (hashOrNumber: string | number) => Promise<any>;
    };
    teardown(): Promise<void>;
    pause(): Promise<unknown>;
}>>;
export declare function defer<T>(): {
    resolve: (value: any) => void;
    reject: (reason: any) => void;
    promise: Promise<T>;
};
export declare const sendTransaction: (tx: Promise<SubmittableExtrinsic<"promise">>) => Promise<{
    events: Promise<Codec[]>;
}>;
export declare const testingPairs: (keyringType?: "ed25519" | "sr25519", ss58Format?: number) => {
    alice: import("@polkadot/keyring/types").KeyringPair;
    bob: import("@polkadot/keyring/types").KeyringPair;
    charlie: import("@polkadot/keyring/types").KeyringPair;
    dave: import("@polkadot/keyring/types").KeyringPair;
    eve: import("@polkadot/keyring/types").KeyringPair;
    alith: import("@polkadot/keyring/types").KeyringPair;
    baltathar: import("@polkadot/keyring/types").KeyringPair;
    charleth: import("@polkadot/keyring/types").KeyringPair;
    dorothy: import("@polkadot/keyring/types").KeyringPair;
    ethan: import("@polkadot/keyring/types").KeyringPair;
    keyring: Keyring;
    keyringEth: import("@polkadot/keyring/types").KeyringInstance;
};
