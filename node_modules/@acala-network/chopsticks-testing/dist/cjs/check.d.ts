import { ApiPromise } from '@polkadot/api';
import { Codec } from '@polkadot/types/types';
export type EventFilter = string | {
    method: string;
    section: string;
};
export type RedactOptions = {
    number?: boolean | number;
    hash?: boolean;
    hex?: boolean;
    address?: boolean;
    redactKeys?: RegExp;
    removeKeys?: RegExp;
};
export type ExpectFn = (value: any) => {
    toMatchSnapshot: (msg?: string) => void;
    toMatch(value: any, msg?: string): void;
    toMatchObject(value: any, msg?: string): void;
};
export declare class Checker {
    #private;
    constructor(expectFn: ExpectFn, value: any, message?: string);
    toHuman(): this;
    toHex(): this;
    toJson(): this;
    message(message: string): this;
    filterEvents(...filters: EventFilter[]): this;
    redact(options?: RedactOptions): this;
    map(fn: (value: any) => any): this;
    pipe(fn?: (value: Checker) => Checker): Checker;
    value(): Promise<any>;
    toMatchSnapshot(msg?: string): Promise<void>;
    toMatch(value: any, msg?: string): Promise<void>;
    toMatchObject(value: any, msg?: string): Promise<void>;
}
export declare const withExpect: (expectFn: ExpectFn) => {
    check: (value: any, msg?: string) => Checker;
    checkEvents: ({ events }: {
        events: Promise<Codec[] | Codec>;
    }, ...filters: EventFilter[]) => Checker;
    checkSystemEvents: ({ api }: {
        api: ApiPromise;
    }, ...filters: EventFilter[]) => Checker;
    checkUmp: ({ api }: {
        api: ApiPromise;
    }) => Checker;
    checkHrmp: ({ api }: {
        api: ApiPromise;
    }) => Checker;
    checkHex: (value: any, msg?: string) => Checker;
};
